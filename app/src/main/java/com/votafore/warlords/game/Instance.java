package com.votafore.warlords.game;

import android.content.Context;
import android.util.Log;

import com.votafore.warlords.net.IClient;
import com.votafore.warlords.net.IServer;
import com.votafore.warlords.net.wifi.CMWifiClient;
import com.votafore.warlords.net.wifi.CMWifiServer;
import com.votafore.warlords.net.ISocketListener;

/**
 * @author Votafore
 * Created on 17.09.2016.
 *
 * Это клиентская часть игры. Хранит объекты для отрисовки
 * способен общаться с сервером (точнее с представителем):
 * отправлять сообщения серверу и принимать их от него.
 *
 *
 *      Клиент (каждый клиент) хранит полный список объектов и всю информацию по каждому объекту
 *      т.к. это необходимо для отрисовки объекта(ов) на клиенте.
 *      Сервер содержит весь список объектов и измененные параметры объектов для
 *      передачи остальным клиентам (синхронизации).
 *      Т.е. списки отличаются содержанием информации.
 *
 * - иметь информацию об игроках инстанса (пока не известно в каком виде)
 *      уже начинаю думать что это не обязательно (пока достаточно только списка объектов)
 * - иметь информацию об объектах инстанса
 *      - для отрисовки (что построено\создано игроками)
 *      - чьи это объекты
 * - иметь механизм изменения параметров объектов сцены
 *      управляемый другими игроками (при многопользовательской игре)
 *      управляемый текущим игроком
 *
 * - реагировать на события управления (команды, onTouch и т.д.)
 *
 * Именно этот класс будет основным в треьтем Активити. GameManager передаст
 * его и в процессе игры (далее) будет учавствовать только этот он.
 */

public class Instance implements IClient {

    private String TAG = "MSOCKET_Instance";


    /**
     * служебные переменные
     */
    Context mContext;

    public Instance(Context context) {

        mContext    = context;

        Log.v(TAG, "создали объект Instance");

    }


    /*****************************************************************************************************************/
    /*********************************************** РАЗДЕЛ РАБОТЫ ПО СЕТИ (ИЛИ ЛОКАЛЬНО) ****************************/
    /*****************************************************************************************************************/

    /**
     * для этих возможностей класс и реализует интерфейсы IClient и IServer
     */


    /*****************************************************************************************************************/
    /****************************************************** CLIENT ***************************************************/

    /**
     * ссылка на представителя сервера (им может быть и реальный сервер)
     */
    IServer mServer;

    public void setServer(IServer server){
        mServer = server;
    }


    /**
     * клиент может получать сообщения от сервера (асинхронные... т.е. из другого потока)
     */
    @Override
    public void onMessageReceived(String msg){

        // TODO: обработка сообщения сервера
        Log.v(TAG, "Клиент: получено сообщение сервера: " + msg);
    }

    @Override
    public void release(){

        // сигнал от сервера
        // при получении (по каким-то причинам)
        // надо нормально закрыть соединение

        Log.v(TAG, "Клиент: поступил сигнал release от сервера");

    }

}